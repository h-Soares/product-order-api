---
openapi: 3.0.1
info:
  title: Orders and Products API Restful
  description: Documentation for orders and products API Restful
  contact:
    name: Linkedin
    url: https://www.linkedin.com/in/hiago-soares-de-araujo-96840a271
  version: '1.0'
servers:
- url: http://localhost:8080/
  description: Localhost server
- url: https://product-order-api.onrender.com
  description: Deploy server
paths:
  "/users/{uuid}":
    get:
      tags:
      - User
      description: Get an user by UUID
      operationId: findByUUID
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '400':
          description: Illegal argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
    put:
      tags:
      - User
      description: Update an user by UUID
      operationId: updateByUUID
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '409':
          description: Entity already exists
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
    delete:
      tags:
      - User
      description: Delete an user by UUID
      operationId: deleteByUUID
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. No content
        '400':
          description: Invalid argument
        '404':
          description: Entity not found
  "/products/{uuid}":
    get:
      tags:
      - Product
      description: Get a product by UUID
      operationId: findByUUID_1
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '400':
          description: Illegal argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
    put:
      tags:
      - Product
      description: Update a product by UUID
      operationId: updateByUUID_1
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProductInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
    delete:
      tags:
      - Product
      description: Delete a product by UUID
      operationId: deleteByUUID_1
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. No content
        '400':
          description: Invalid argument
        '404':
          description: Entity not found
  "/payments/{uuid}":
    get:
      tags:
      - Payment
      description: Get a payment by UUID
      operationId: findByUUID_2
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '400':
          description: Illegal argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
    put:
      tags:
      - Payment
      summary: 'Payment type: CREDIT_CARD, PIX'
      description: Update a payment by UUID
      operationId: updateByUUID_2
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PaymentInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
    delete:
      tags:
      - Payment
      description: Delete a payment by UUID
      operationId: deleteByUUID_2
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. No content
        '400':
          description: Invalid argument
        '404':
          description: Entity not found
  "/orders/{uuid}":
    get:
      tags:
      - Order
      description: Get a order by UUID
      operationId: findByUUID_3
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Illegal argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
    put:
      tags:
      - Order
      summary: 'Order status: WAITING_PAYMENT, PAID, SHIPPED, DELIVERED, CANCELED'
      description: Update an order by UUID
      operationId: updateByUUID_3
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OrderInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '402':
          description: Payment required
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
    delete:
      tags:
      - Order
      description: Delete an order by UUID
      operationId: deleteByUUID_3
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. No content
        '400':
          description: Invalid argument
        '404':
          description: Entity not found
  "/orders/{order_uuid}/items":
    put:
      tags:
      - Order
      description: Update an order item by order UUID
      operationId: updateItemByUUID
      parameters:
      - name: order_uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OrderItemInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
    post:
      tags:
      - Order
      description: Insert a new order item by order UUID
      operationId: addItemByUUID
      parameters:
      - name: order_uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OrderItemInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
    delete:
      tags:
      - Order
      description: Delete an order item by order UUID
      operationId: deleteItemByUUID
      parameters:
      - name: order_uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OrderItemDeleteDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Invalid argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
  "/categories/{uuid}":
    get:
      tags:
      - Category
      description: Get a category by UUID
      operationId: findByUUID_4
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '400':
          description: Illegal argument
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
    put:
      tags:
      - Category
      description: Update a category by UUID
      operationId: updateByUUID_4
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CategoryInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '409':
          description: Entity already exists
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
    delete:
      tags:
      - Category
      description: Delete a category by UUID
      operationId: deleteByUUID_4
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. No content
        '400':
          description: Invalid argument
        '404':
          description: Entity not found
  "/users":
    get:
      tags:
      - User
      description: Get a paginated list of all users
      operationId: findAll
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageUserDTO"
    post:
      tags:
      - User
      description: Insert a new user
      operationId: insert
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserInsertDTO"
        required: true
      responses:
        '201':
          description: Created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '409':
          description: Entity already exists
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDTO"
  "/products":
    get:
      tags:
      - Product
      description: Get a paginated list of all products
      operationId: findAll_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageProductDTO"
    post:
      tags:
      - Product
      description: Insert a new product
      operationId: insert_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProductInsertDTO"
        required: true
      responses:
        '201':
          description: Created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
  "/products/{product_uuid}/categories":
    post:
      tags:
      - Product
      description: Insert a category into a product by product UUID
      operationId: addCategoryByUUID
      parameters:
      - name: product_uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProductCategoryInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '409':
          description: Entity already exists
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
    delete:
      tags:
      - Product
      description: Delete a category from a product by product UUID
      operationId: removeCategoryByUUID
      parameters:
      - name: product_uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProductCategoryInsertDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProductDTO"
  "/payments":
    get:
      tags:
      - Payment
      description: Get a paginated list of all payments
      operationId: findAll_2
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PagePaymentDTO"
    post:
      tags:
      - Payment
      summary: 'Payment type: CREDIT_CARD, PIX'
      description: Insert a new payment
      operationId: insert_2
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PaymentInsertDTO"
        required: true
      responses:
        '201':
          description: Created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '403':
          description: Already paid
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PaymentDTO"
  "/orders":
    get:
      tags:
      - Order
      description: Get a paginated list of all orders
      operationId: findAll_3
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageOrderDTO"
    post:
      tags:
      - Order
      summary: 'Order status: WAITING_PAYMENT, PAID, SHIPPED, DELIVERED, CANCELED'
      description: Insert a new order
      operationId: insert_3
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OrderInsertDTO"
        required: true
      responses:
        '201':
          description: Created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '402':
          description: Payment required
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
        '404':
          description: Entity not found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OrderDTO"
  "/categories":
    get:
      tags:
      - Category
      description: Get a paginated list of all categories
      operationId: findAll_4
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCategoryDTO"
    post:
      tags:
      - Category
      description: Insert a new category
      operationId: insert_4
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CategoryInsertDTO"
        required: true
      responses:
        '201':
          description: Created
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '400':
          description: Invalid arguments
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
        '409':
          description: Entity already exists
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CategoryDTO"
components:
  schemas:
    UserInsertDTO:
      required:
      - email
      - name
      - password
      - phone
      type: object
      properties:
        name:
          maxLength: 65
          minLength: 2
          pattern: "^(?!.*[#@!0-9])[A-Za-zÀ-ÖØ-öø-ÿ]+(?: [A-Za-zÀ-ÖØ-öø-ÿ]+)*$"
          type: string
        email:
          type: string
        password:
          pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d!@#$%^&*()\-_=+{}\[\]|\\:;"'<>,.?\/`~]{6,}$
          type: string
        phone:
          pattern: "^$|^\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})$|^([0-9]{11})$"
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        phone:
          type: string
    ProductInsertDTO:
      required:
      - description
      - imgUrl
      - name
      - price
      type: object
      properties:
        name:
          maxLength: 200
          minLength: 2
          pattern: "^[A-Za-zÀ-ÖØ-öø-ÿ0-9(),. ]+$"
          type: string
        description:
          type: string
        price:
          type: number
        imgUrl:
          pattern: "^(https?|ftp):\\/\\/[^\\s\\$.?#].[^\\s]*$"
          type: string
    CategoryDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    ProductDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
        imgUrl:
          type: string
        categories:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/CategoryDTO"
    PaymentInsertDTO:
      required:
      - order_id
      - paymentType
      type: object
      properties:
        paymentType:
          type: string
          enum:
          - CREDIT_CARD
          - PIX
        order_id:
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          type: string
    PaymentDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        moment:
          type: string
          format: date-time
        paymentType:
          type: string
          enum:
          - CREDIT_CARD
          - PIX
        amount:
          type: number
    OrderInsertDTO:
      required:
      - client_id
      - orderStatus
      type: object
      properties:
        orderStatus:
          type: string
          enum:
          - WAITING_PAYMENT
          - PAID
          - SHIPPED
          - DELIVERED
          - CANCELED
        client_id:
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          type: string
    OrderDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        moment:
          type: string
          format: date-time
        orderStatus:
          type: string
          enum:
          - WAITING_PAYMENT
          - PAID
          - SHIPPED
          - DELIVERED
          - CANCELED
        total:
          type: number
        client:
          "$ref": "#/components/schemas/UserDTO"
        payment:
          "$ref": "#/components/schemas/PaymentDTO"
        items:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/OrderItemDTO"
    OrderItemDTO:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        productPriceRecord:
          type: number
        subTotal:
          type: number
        product:
          "$ref": "#/components/schemas/ProductDTO"
    OrderItemInsertDTO:
      required:
      - product_id
      - quantity
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        product_id:
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          type: string
    CategoryInsertDTO:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          pattern: "^(?!.*[#@!0-9])[A-Za-zÀ-ÖØ-öø-ÿ]+(?: [A-Za-zÀ-ÖØ-öø-ÿ]+)*$"
          type: string
    ProductCategoryInsertDTO:
      required:
      - category_uuid
      type: object
      properties:
        category_uuid:
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageUserDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/UserDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageProductDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/ProductDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PagePaymentDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/PaymentDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageOrderDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/OrderDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageCategoryDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CategoryDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    OrderItemDeleteDTO:
      required:
      - product_id
      type: object
      properties:
        product_id:
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          type: string
